<?php
/**
 * @file
 * Module file for the Password HIBP module.
 */

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_hibp_form_user_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'password_hibp_user_profile_form_validate';
}

/**
 * Check if password is pwned.
 */
function password_hibp_user_profile_form_validate(&$form, &$form_state) {
  $pwned = _password_hibp_isPwned(sha1($form_state->getValue('pass')));

  if ($pwned) {
    $form_state->setErrorByName('pass', t('Password rejected because it is known to have been compromised. This has been validated using the <a href="http://haveibeenpwned.com">HaveIBeenPwned.com</a> API. For more information on this, please visit <a href="http://haveibeenpwned.com">HaveIBeenPwned.com</a>. In the meanwhile, please select another password.'));
  }
  return $pwned;

}

function _password_hibp_isPwned($sha1Hash) {
  $firstFive = substr($sha1Hash, 0, 5);
  $remainder = strtoupper(substr($sha1Hash, 5));	//api returns upper case; make this upper too so that it matches.

  $url = "https://api.pwnedpasswords.com/range/".$firstFive;
  $client = Drupal::httpClient();
  try {
    $response = $client->get($url);
  } catch (GuzzleHttp\Exception\RequestException $ex) {
    //we may get an exception if something really bad happens like a https certificate problem. Just swallow the error and ignore.
    return false;
  }
  
  //we should never get a response other than 200, but if we do, then API is not working properly, so we'll ignore anything it says.
  if ($response->getStatusCode() !== 200) {
	return false;
  }
  $matches = explode("\n", $response->getBody());
  foreach ($matches as $match) {
	list($hashMatch, $matchCount) = explode(':', $match);
	if ($hashMatch === $remainder) {
	  //Password matches a known compromised password. Oh dear. I think we need to tell the user about that.
      return true;
    }
  }
  //No match, so password isn't pwned. Phew.
  return false;
}
